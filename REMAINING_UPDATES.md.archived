# Remaining Script Updates - Migration Guide

## Overview
Three utility scripts need centralized logger integration for consistency with the updated core scripts.

## Scripts to Update

### 1. misp-restore.py (v1.1 ‚Üí v2.0)

**Changes Required:**
```python
# Add after imports (line 33)
from misp_logger import get_logger

# Replace setup_logging() function (lines 70-109) with:
def setup_logging() -> logging.Logger:
    """Setup centralized logging"""
    # Use centralized JSON logger
    misp_logger = get_logger('misp-restore', 'misp:restore')
    # Get the underlying Python logger for compatibility
    return misp_logger.logger

# Update RestoreManager.__init__ to add:
self.logger = get_logger('misp-restore', 'misp:restore')
self.start_time = time.time()

# Add to perform_restore() at end:
duration = time.time() - self.start_time
self.logger.success(
    "Restore completed",
    event_type="restore",
    action="complete",
    duration=duration,
    backup_name=backup.name
)
```

**Key Logging Updates:**
- Import centralized logger
- Add event_type="restore" to all logger calls
- Add action, status, component fields where appropriate
- Track duration with start_time

### 2. misp-update.py (v1.0 ‚Üí v2.0)

**Changes Required:**
```python
# Add after imports (line 30)
from misp_logger import get_logger

# Replace setup_logging() function (lines 72-108) with:
def setup_logging() -> logging.Logger:
    """Setup centralized logging"""
    misp_logger = get_logger('misp-update', 'misp:update')
    logger = misp_logger.logger
    logger.info(f"üìù JSON Logs: /opt/misp/logs/misp-update.log")
    return logger

# Update MISPUpdater.__init__ to add:
self.start_time = time.time()

# Add to run_update() at end (before return True):
duration = time.time() - self.start_time
self.logger.success(
    "Update completed successfully",
    event_type="update",
    action="complete",
    duration=duration
)
```

**Key Logging Updates:**
- Import centralized logger
- Add event_type="update" throughout
- Add action, status, component fields
- Track duration

### 3. misp-backup-cron.py (v1.0 ‚Üí v2.0)

**Changes Required:**
```python
# Add after imports (line 37)
from misp_logger import get_logger

# Replace setup_logging() function (lines 120-154) with:
def setup_logging() -> logging.Logger:
    """Setup centralized logging"""
    misp_logger = get_logger('misp-backup-cron', 'misp:backup_cron')
    logger = misp_logger.logger
    logger.info(f"üìù JSON Logs: /opt/misp/logs/misp-backup-cron.log")
    return logger

# Update MISPBackupManager.__init__ to add:
self.start_time = time.time()

# Add to run() at end:
duration = time.time() - self.start_time
self.logger.success(
    "Backup cron completed",
    event_type="backup_cron",
    action="complete",
    duration=duration,
    backup_type=backup_type
)
```

**Key Logging Updates:**
- Import centralized logger
- Add event_type="backup_cron" throughout
- Add action, status fields
- Track duration

## Testing After Updates

Run these commands to verify each script:

```bash
# Syntax check
cd /home/gallagher/misp-repo/misp-install/scripts
python3 -m py_compile misp-restore.py
python3 -m py_compile misp-update.py
python3 -m py_compile misp-backup-cron.py

# Verify logs directory
ls -la /opt/misp/logs/

# Test restore (dry run)
cd /home/gallagher/misp-repo/misp-install
python3 scripts/misp-restore.py --list

# Test update (check only)
python3 scripts/misp-update.py --check-only

# Test backup cron (dry run)
python3 scripts/misp-backup-cron.py --dry-run
```

## CIM Fields Added

All scripts will now log with these consistent fields:
- **time**: ISO 8601 timestamp
- **host**: System hostname
- **user**: Current user
- **source**: Script name
- **sourcetype**: misp:restore, misp:update, or misp:backup_cron
- **severity**: INFO, WARNING, ERROR, DEBUG
- **message**: Human-readable message
- **event_type**: restore, update, or backup_cron
- **action**: Specific action (complete, start, verify, etc.)
- **status**: info, success, warning, error
- **duration**: Execution time in seconds
- **component**: Sub-component being operated on

## Quick Reference

**Before:**
- Logs: /var/log/misp-install/*.log
- Format: Plain text
- Rotation: None

**After:**
- Logs: /opt/misp/logs/*.log
- Format: JSON with CIM fields
- Rotation: 5 files √ó 20MB

## Status

- ‚úÖ Core scripts updated (5/8)
- ‚è≥ Utility scripts pending (3/8)
- üìÑ Documentation updates needed

Once these 3 scripts are updated, all 8 MISP management scripts will have consistent, SIEM-ready logging!
