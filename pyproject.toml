[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "misp-installer"
version = "5.4.0"
description = "Professional-grade MISP (Malware Information Sharing Platform) Docker installation automation"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "tKQB Enterprises", email = "admin@tkqb.com"}
]
keywords = [
    "misp",
    "threat-intelligence",
    "docker",
    "automation",
    "security",
    "incident-response",
    "nerc-cip",
    "ics-scada"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Environment :: Console",
]

dependencies = [
    "pyyaml>=6.0",
]

[project.optional-dependencies]
gui = [
    "textual>=0.45.0",
    "textual-dev>=1.2.0",
    "pyperclip>=1.8.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]
all = [
    "misp-installer[gui,dev]",
]

[project.urls]
Homepage = "https://github.com/yourusername/misp-install"
Documentation = "https://github.com/yourusername/misp-install/docs"
Repository = "https://github.com/yourusername/misp-install"
"Bug Tracker" = "https://github.com/yourusername/misp-install/issues"
Changelog = "https://github.com/yourusername/misp-install/blob/main/docs/testing_and_updates/CHANGELOG.md"

[project.scripts]
misp-install-gui = "misp_install_gui:main"

[tool.setuptools]
packages = ["lib"]
py-modules = ["misp_logger", "misp_install_gui", "check_deps"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (require Docker)",
    "unit: marks tests as unit tests (fast, no external dependencies)",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/deprecated/*",
    "*/phases/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true

# Ruff configuration (linting + formatting)
[tool.ruff]
target-version = "py38"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*.py" = ["ARG", "S101"]  # Allow unused arguments and asserts in tests

[tool.ruff.lint.isort]
known-first-party = ["lib", "misp_logger"]

# Mypy configuration (type checking)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when adding type hints
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Black configuration (if using Black instead of Ruff format)
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | deprecated
  | phases
)/
'''
